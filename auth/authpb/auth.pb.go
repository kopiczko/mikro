// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

/*
Package authpb is a generated protocol buffer package.

It is generated from these files:
	auth.proto

It has these top-level messages:
	LoginRequest
	LoginResponse
	ProfileRequest
	ProfileResponse
*/
package authpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LoginResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// User's name.
type ProfileRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *ProfileRequest) Reset()                    { *m = ProfileRequest{} }
func (m *ProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfileRequest) ProtoMessage()               {}
func (*ProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Complete user's profile.
type ProfileResponse struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	FullName string `protobuf:"bytes,2,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
}

func (m *ProfileResponse) Reset()                    { *m = ProfileResponse{} }
func (m *ProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*ProfileResponse) ProtoMessage()               {}
func (*ProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*LoginRequest)(nil), "authpb.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "authpb.LoginResponse")
	proto.RegisterType((*ProfileRequest)(nil), "authpb.ProfileRequest")
	proto.RegisterType((*ProfileResponse)(nil), "authpb.ProfileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Auth service

type AuthClient interface {
	// Authenticates the user.
	// CAUTION: Current implementation does not check password, it blindly
	// creates token for the user.
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	// Returns  user's profile.
	Profile(ctx context.Context, in *ProfileRequest, opts ...client.CallOption) (*ProfileResponse, error)
}

type authClient struct {
	c           client.Client
	serviceName string
}

func NewAuthClient(serviceName string, c client.Client) AuthClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "authpb"
	}
	return &authClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Profile(ctx context.Context, in *ProfileRequest, opts ...client.CallOption) (*ProfileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.Profile", in)
	out := new(ProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	// Authenticates the user.
	// CAUTION: Current implementation does not check password, it blindly
	// creates token for the user.
	Login(context.Context, *LoginRequest, *LoginResponse) error
	// Returns  user's profile.
	Profile(context.Context, *ProfileRequest, *ProfileResponse) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Auth{hdlr}, opts...))
}

type Auth struct {
	AuthHandler
}

func (h *Auth) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AuthHandler.Login(ctx, in, out)
}

func (h *Auth) Profile(ctx context.Context, in *ProfileRequest, out *ProfileResponse) error {
	return h.AuthHandler.Profile(ctx, in, out)
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2c, 0x2d, 0xc9,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0xb1, 0x0b, 0x92, 0x94, 0xdc, 0xb8, 0x78,
	0x7c, 0xf2, 0xd3, 0x33, 0xf3, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xa4, 0xb8, 0x38,
	0x4a, 0x8b, 0x53, 0x8b, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0,
	0x7c, 0x90, 0x5c, 0x41, 0x62, 0x71, 0x71, 0x79, 0x7e, 0x51, 0x8a, 0x04, 0x13, 0x44, 0x0e, 0xc6,
	0x57, 0x52, 0xe5, 0xe2, 0x85, 0x9a, 0x53, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x24, 0xc2, 0xc5,
	0x5a, 0x92, 0x9f, 0x9d, 0x9a, 0x07, 0x35, 0x05, 0xc2, 0x51, 0xd2, 0xe1, 0xe2, 0x0b, 0x28, 0xca,
	0x4f, 0xcb, 0xcc, 0x49, 0x25, 0xc2, 0x42, 0x25, 0x27, 0x2e, 0x7e, 0xb8, 0x6a, 0xa8, 0xb1, 0x42,
	0x5c, 0x2c, 0x48, 0x4a, 0xc1, 0x6c, 0x21, 0x69, 0x2e, 0xce, 0xb4, 0xd2, 0x9c, 0x9c, 0x78, 0xb0,
	0x04, 0xd4, 0x61, 0x20, 0x01, 0xbf, 0xc4, 0xdc, 0x54, 0xa3, 0x1a, 0x2e, 0x16, 0xc7, 0xd2, 0x92,
	0x0c, 0x21, 0x33, 0x2e, 0x56, 0xb0, 0x03, 0x85, 0x44, 0xf4, 0x20, 0x5e, 0xd7, 0x43, 0xf6, 0xb7,
	0x94, 0x28, 0x9a, 0x28, 0xc4, 0x3a, 0x25, 0x06, 0x21, 0x1b, 0x2e, 0x76, 0xa8, 0x1b, 0x84, 0xc4,
	0x60, 0x6a, 0x50, 0xbd, 0x20, 0x25, 0x8e, 0x21, 0x0e, 0xd3, 0x9d, 0xc4, 0x06, 0x0e, 0x6d, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x20, 0x6f, 0x79, 0x7b, 0x01, 0x00, 0x00,
}
